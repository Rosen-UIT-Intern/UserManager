// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManager.Dal;

namespace UserManager.Dal.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20180913065407_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserManager.Dal.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { Id = new Guid("3777ec35-2393-4053-95ad-cc587d87a3e3"), Name = "Technical", OrganizationId = new Guid("c00af6d2-5c26-44cc-8414-dbb420d0f942") },
                        new { Id = new Guid("ab2ace08-2daf-4422-9242-293025aab9f6"), Name = "HR", OrganizationId = new Guid("c00af6d2-5c26-44cc-8414-dbb420d0f942") },
                        new { Id = new Guid("abba6119-b935-4870-9c06-be6b8872fb32"), Name = "SoftwareEngineer", OrganizationId = new Guid("a7bd1b7b-1110-4c6c-9fd6-f47a9cc7fbda") },
                        new { Id = new Guid("f90317a4-a87c-4800-8d24-8e7c5e84073e"), Name = "ComputerEngineer", OrganizationId = new Guid("a7bd1b7b-1110-4c6c-9fd6-f47a9cc7fbda") }
                    );
                });

            modelBuilder.Entity("UserManager.Dal.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = new Guid("c00af6d2-5c26-44cc-8414-dbb420d0f942"), Name = "Rosen" },
                        new { Id = new Guid("a7bd1b7b-1110-4c6c-9fd6-f47a9cc7fbda"), Name = "UIT" }
                    );
                });

            modelBuilder.Entity("UserManager.Dal.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("fa83781c-c13e-4b2a-a13b-cc557cfba720"), Name = "Technical Lead" },
                        new { Id = new Guid("77817bb6-2a22-4635-8dda-b820356ed8f9"), Name = "HR Lead" },
                        new { Id = new Guid("d1eb257f-9a58-4751-8a6d-a1f0ed91b3ba"), Name = "Engineer" }
                    );
                });

            modelBuilder.Entity("UserManager.Dal.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("PrivatePhone")
                        .IsRequired();

                    b.Property<string>("ProfileImage");

                    b.Property<string>("WorkPhone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "12345", Email = "[{\"address\":\"main email\",\"isMain\":true},{\"address\":\"not mail email\",\"isMain\":false}]", FirstName = "Minh", LastName = "Nguyen Le", Mobile = "[{\"number\":\"333444\",\"isMain\":true},{\"number\":\"555666\",\"isMain\":false}]", OrganizationId = new Guid("c00af6d2-5c26-44cc-8414-dbb420d0f942"), PrivatePhone = "[{\"number\":\"91011\",\"isMain\":true},{\"number\":\"121314\",\"isMain\":false}]", ProfileImage = "image", WorkPhone = "[{\"number\":\"1234\",\"isMain\":true},{\"number\":\"5678\",\"isMain\":false}]" }
                    );
                });

            modelBuilder.Entity("UserManager.Dal.UserGroup", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<Guid>("GroupId");

                    b.Property<bool>("IsMain");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new { UserId = "12345", GroupId = new Guid("3777ec35-2393-4053-95ad-cc587d87a3e3"), IsMain = true },
                        new { UserId = "12345", GroupId = new Guid("ab2ace08-2daf-4422-9242-293025aab9f6"), IsMain = false }
                    );
                });

            modelBuilder.Entity("UserManager.Dal.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<bool>("IsMain");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = "12345", RoleId = new Guid("d1eb257f-9a58-4751-8a6d-a1f0ed91b3ba"), IsMain = true }
                    );
                });

            modelBuilder.Entity("UserManager.Dal.Group", b =>
                {
                    b.HasOne("UserManager.Dal.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Dal.User", b =>
                {
                    b.HasOne("UserManager.Dal.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Dal.UserGroup", b =>
                {
                    b.HasOne("UserManager.Dal.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserManager.Dal.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UserManager.Dal.UserRole", b =>
                {
                    b.HasOne("UserManager.Dal.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Dal.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
